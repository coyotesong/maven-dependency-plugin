/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.maven.plugins.dependency.tree;

import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.apache.maven.artifact.Artifact;
import org.apache.maven.model.Exclusion;
import org.apache.maven.plugins.dependency.utils.velocity.Style;
import org.apache.maven.shared.dependency.graph.DependencyNode;
import org.apache.maven.shared.dependency.graph.traversal.DependencyNodeVisitor;

/**
 * DependencyNode with output format-specific extensions.
 *
 * Most output formats are intended for machine-to-machine communications
 * and accuracy and the lack of ambiguity is the most important element
 * of the generated documents.
 * </p>
 * However some formats are intended for machine-to-human communications,
 * e.g., by creating images or embedded documents, and human factors are
 * often more important than the lack of ambiguity. For instance, we
 * may wish to provide some information via (color-blind safe!) colors
 * or dashed lines instead of adding a bit more visual clutter to the
 * image.
 * </p?
 * This is especially important since generated images may be so large
 * that the scaled image has illegible text - but we can still see color
 * and line styles. That may provide enough information for the user
 * to quickly zoom into a specific area for closer examination.
 * </p>
 * Extensions
 * </p>
 * The autogenerated 'alias' provides a much shorter alias for the artifact.
 * Few formats support this but it can make a significant difference in the
 * size of the final file.
 * </p>
 * The 'style' serves two purposes. The first is that it allows direct
 * customization of the output document. The second is that it allows
 * precomputation of nontrivial cusomizations. The latter can usually
 * be handled in the template's language but that tends to be ugly and
 * complex. It will be much more maintainable to move this customization
 * into the 'style' object since that can be easily modified as needed.
 * </p>
 * The 'tooltip' provides the text shown in dynamic formats like svg/svgz.
 * This is currently a placeholder - it would be if it provided the pom's
 * title or description.
 * </p>
 * The 'rank' provides the minimum distance from the root to this artifact.
 * It could be used to group artifacts at each rank.
 */
public class DecoratedNode implements DependencyNode, Comparable<DecoratedNode> {
    private static final AtomicInteger COUNTER = new AtomicInteger(0);

    private final int id = COUNTER.incrementAndGet();
    private final String alias = "node" + id;

    private DependencyNode root;

    @SuppressWarnings("unused")
    private final String tooltip;

    private Style style;

    private boolean last = true;

    private int rank = 0;

    public DecoratedNode(DependencyNode node, Style style) {
        this.artifact = node.getArtifact();
        this.premanagedVersion = node.getPremanagedVersion();
        this.premanagedScope = node.getPremanagedScope();
        this.versionConstraint = node.getVersionConstraint();
        this.optional = node.getOptional();
        this.exclusions = node.getExclusions();
        this.nodeString = node.toNodeString();

        this.tooltip = node.toNodeString();
        this.style = style;

        if (node.getParent() == null) {
            this.root = this;
        }

        // we could handle this via a second constructor but this avoids the need
        // for that.
        final Function<DecoratedNode, DecoratedNode> setOtherProperties = (n) -> {
            n.parent = this;
            n.rank = this.rank + 1;
            n.root = this.root;
            return n;
        };

        if (!node.getChildren().isEmpty()) {
            this.children = node.getChildren().stream()
                    .map(child -> new DecoratedNode(child, style))
                    .map(setOtherProperties)
                    .collect(Collectors.toList());

            // with the recursive copy this approach is more reliable than
            // defaulting to 'false' and only setting 'true' in this loop
            for (int i = 0; i < children.size() - 1; i++) {
                ((DecoratedNode) this.getChildren().get(i)).last = false;
            }
        } else {
            this.children = Collections.emptyList();
        }
    }

    public int getId() {
        return id;
    }

    public String getNodeString() {
        return nodeString;
    }

    /**
     * Return a unique alias for this artifact
     *
     * @return alias
     */
    public String getAlias() {
        return alias;
    }

    public String getTooltip() {
        return tooltip;
    }

    public int getRank() {
        return rank;
    }

    public Style getStyle() {
        return style;
    }

    public boolean isLast() {
        return last;
    }

    public String getNodeFormat() {
        if (style instanceof DOTDependencyNodeVisitor.DOTStyle) {
            return ((DOTDependencyNodeVisitor.DOTStyle) style).getNodeFormat(this);
        }

        return "";
    }

    public String getEdgeFormat() {
        if (style instanceof DOTDependencyNodeVisitor.DOTStyle) {
            return ((DOTDependencyNodeVisitor.DOTStyle) style).getEdgeFormat(this.parent, this);
        }

        return "";
    }

    public boolean getShowType() {
        if (style instanceof DOTDependencyNodeVisitor.DOTStyle) {
            return ((DOTDependencyNodeVisitor.DOTStyle) style).getShowType(this);
        }

        return true;
    }

    public boolean getShowClassifier() {
        return artifact.hasClassifier();
    }

    @Override
    public int compareTo(DecoratedNode that) {
        return this.artifact.compareTo(that.artifact);
    }

    /**
     * Reset the AtomicCounter used to generate Ids - for tests
     */
    public static void resetCounter() {
        COUNTER.set(0);
    }

    // ------------------------------------------------------------------------------
    // Everything blow this is copied from BuildingDependencyNodeVisitor.WrappedNode.
    // ------------------------------------------------------------------------------
    private final Artifact artifact;

    private DependencyNode parent;

    private final String premanagedVersion;

    private final String premanagedScope;

    private final String versionConstraint;

    private List<DependencyNode> children;

    private final Boolean optional;

    private final List<Exclusion> exclusions;

    private final String nodeString;

    /**
     * {@inheritDoc}
     */
    @Override
    public Artifact getArtifact() {
        return artifact;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<DependencyNode> getChildren() {
        return children;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public boolean accept(DependencyNodeVisitor visitor) {
        if (visitor.visit(this)) {
            for (DependencyNode child : getChildren()) {
                if (!child.accept(visitor)) {
                    break;
                }
            }
        }

        return visitor.endVisit(this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DependencyNode getParent() {
        return parent;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getPremanagedVersion() {
        return premanagedVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getPremanagedScope() {
        return premanagedScope;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String getVersionConstraint() {
        return versionConstraint;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String toNodeString() {
        return nodeString;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean getOptional() {
        return optional;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Exclusion> getExclusions() {
        return exclusions;
    }

    /**
     * {@inheritDoc}
     */
    public void setChildren(List<DependencyNode> children) {
        this.children = children;
    }
}
